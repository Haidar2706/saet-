// auction.js


// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏


let users = [
  { username: 'admin', password: 'admin', role: 'admin' },
  { username: 'user', password: 'user', role: 'user' },
  { username: 'haidar', password: 'haidar', role: 'haidar' }
];


// –ó–∞–º–µ–Ω–∏–º users, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ localStorage
const storedUsers = localStorage.getItem('users');
if (storedUsers) {
  try {
    users = JSON.parse(storedUsers);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ users –∏–∑ localStorage:', e);
  }
}
// –õ–æ—Ç—ã
let winners = [];
let lots = [
  {
    id: 1,
    title: '–õ–æ—Ç 1',
    category: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è A',
    price: 1000,
    size: '10 –∫–≥',
    status: 'active',
    image: 'https://via.placeholder.com/100',
    bids: [],
    endTime: Date.now() + 1000 * 60 * 5
  },
  {
    id: 2,
    title: '–õ–æ—Ç 2',
    category: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è B',
    price: 2000,
    size: '15x25 —Å–º',
    status: 'active',
    image: 'https://via.placeholder.com/100',
    bids: [],
    endTime: Date.now() + 1000 * 60 * 10
  }
];


let currentUser = null;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const loginUsername = document.getElementById('loginUsername');
const loginPassword = document.getElementById('loginPassword');
const loginBtn = document.getElementById('loginBtn');
const logoutBtn = document.getElementById('logoutBtn');
const loginError = document.getElementById('loginError');

const currentUserSpan = document.getElementById('currentUser');
const lotsList = document.getElementById('lotsList');
const adminPanel = document.getElementById('adminPanel');

const addLotForm = document.getElementById('addLotForm');
const newLotTitle = document.getElementById('newLotTitle');
const newLotCategory = document.getElementById('newLotCategory');
const newLotPrice = document.getElementById('newLotPrice');
const newLotStatus = document.getElementById('newLotStatus');
const newLotSize = document.getElementById('newLotSize'); // –¥–æ–±–∞–≤–ª–µ–Ω

loginBtn.addEventListener('click', login);
logoutBtn.addEventListener('click', logout);
addLotForm.addEventListener('submit', addLot);
const addUserForm = document.getElementById('addUserForm');
const newUsername = document.getElementById('newUsername');
const newPassword = document.getElementById('newPassword');
const newUserRole = document.getElementById('newUserRole');

addUserForm.addEventListener('submit', function (e) {
  e.preventDefault();

  const username = newUsername.value.trim();
  const password = newPassword.value;
  const role = newUserRole.value;

  if (!username || !password) {
    alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å');
    return;
  }

  if (users.find(u => u.username === username)) {
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return;
  }

  users.push({ username, password, role });
  localStorage.setItem('users', JSON.stringify(users));

  addUserForm.reset();
  alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" –¥–æ–±–∞–≤–ª–µ–Ω`);
});


// Telegram
function sendTelegramMessage(text) {
  const token = '7816037426:AAFVg73M8KYemZl4OoY2dYGyH2jd2_2S7lw';
  const chatId = '1237960319';
  const url = `https://api.telegram.org/bot${token}/sendMessage`;

  return fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'HTML' })
  });
}

function login() {
  const username = loginUsername.value.trim();
  const password = loginPassword.value;
  const user = users.find(u => u.username === username && u.password === password);
  if (user) {
    currentUser = user;
    localStorage.setItem('auctionUser', JSON.stringify(currentUser));
    loginError.textContent = '';
    showMainPage();
  } else {
    loginError.textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
  }
}

function logout() {
  currentUser = null;
  localStorage.removeItem('auctionUser');
  document.getElementById('loginPage').classList.remove('hidden');
  document.getElementById('mainPage').classList.add('hidden');
}

function showMainPage() {
  document.getElementById('loginPage').classList.add('hidden');
  document.getElementById('mainPage').classList.remove('hidden');
  currentUserSpan.textContent = currentUser.username;

  if (currentUser.role === 'admin') {
    adminPanel.classList.remove('hidden');
  } else {
    adminPanel.classList.add('hidden');
  }

  renderLots();

  // ‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –≤—Ö–æ–¥–µ
  if (!window.timerStarted) {
    window.timerStarted = true;
    setInterval(updateTimers, 1000);
  }
}


function renderLots() {
  const tbody = document.getElementById('lotsList');
  const searchValue = document.getElementById('searchInput')?.value?.toLowerCase() || '';
  const filteredLots = lots.filter(lot => lot.title.toLowerCase().includes(searchValue));

  tbody.innerHTML = '';

  let totalBids = 0;
  let totalValue = 0;

  filteredLots.forEach((lot, index) => {
    const highestBid = lot.bids.length ? Math.max(...lot.bids.map(b => b.amount)) : lot.price;
    const remainingMs = lot.endTime ? lot.endTime - Date.now() : null;

    totalBids += lot.bids.length;
    totalValue += highestBid;

    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${index + 1}</td>
      <td>${lot.title}</td>
      <td>${lot.category}</td>
      <td>${
        currentUser?.role === 'admin'
          ? (lot.size || '-')
          : `<input type="text" placeholder="–í–∞—à –æ–±—ä—ë–º" id="userSize${lot.id}" style="width: 90px;" />`
      }</td>
      <td>${lot.price} —Å–æ–º</td>
      <td>${highestBid} —Å–æ–º</td>
      <td id="status${lot.id}">${lot.status}</td>
      <td>${lot.status === 'active' && remainingMs > 0 ? `<span id="timer${lot.id}">${formatTime(remainingMs)}</span>` : '‚Äî'}</td>
      <td>
        ${lot.status === 'active' && remainingMs > 0 ? `<input type="number" id="bidAmount${lot.id}" min="${highestBid + 1}" placeholder="–°—Ç–∞–≤–∫–∞" style="width: 80px;" />` : ''}
      </td>
      <td>
        ${lot.status === 'active' && remainingMs > 0 ? `<button onclick="placeBid(${lot.id})">–°—Ç–∞–≤–∫–∞</button>` : ''}
      </td>
    `;
    tbody.appendChild(tr);

    // üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ —Å—é–¥–∞)
    if (lot.bids.length > 0) {
      const bidHistoryRow = document.createElement('tr');
      bidHistoryRow.innerHTML = `
        <td colspan="10" style="text-align: left; background: #f9f9f9;">
          <b>üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫:</b><br/>
          ${lot.bids.map(b => {
            const date = new Date(b.time).toLocaleString();
            return `üë§ <b>${b.user}</b>: üí∞ ${b.amount} —Å–æ–º ${b.userSize ? `üì¶ <i>${b.userSize}</i>` : ''} üïí ${date}`;
          }).reverse().join('<br/>')}
        </td>
      `;
      tbody.appendChild(bidHistoryRow);
    }
  });

  document.getElementById('lotsTable').classList.remove('hidden');
  const stats = `üë• –õ–æ—Ç–æ–≤: ${filteredLots.length} | üí∞ –°—Ç–∞–≤–æ–∫: ${totalBids} | üìà –í—Å–µ–≥–æ: ${totalValue} —Å–æ–º`;
  document.getElementById('statsPanel').textContent = stats;
}

if (lot.bids.length > 0) {
  const bidHistoryRow = document.createElement('tr');
  bidHistoryRow.innerHTML = `
    <td colspan="10" style="text-align: left; background: #f9f9f9;">
      <b>üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫:</b><br/>
      ${lot.bids.map(b => {
        const date = new Date(b.time).toLocaleString();
        return `üë§ <b>${b.user}</b>: üí∞ ${b.amount} —Å–æ–º ${b.userSize ? `üì¶ <i>${b.userSize}</i>` : ''} üïí ${date}`;
      }).reverse().join('<br/>')}
    </td>
  `;
  tbody.appendChild(bidHistoryRow);
}

function formatTime(ms) {
  const minutes = Math.floor(ms / 60000);
  const seconds = Math.floor((ms / 1000) % 60);
  return `${minutes}–º ${seconds < 10 ? '0' : ''}${seconds}—Å`;
}

function renderLots() {
  const tbody = document.getElementById('lotsList');
  const searchValue = document.getElementById('searchInput')?.value?.toLowerCase() || '';
  const filteredLots = lots.filter(lot => lot.title.toLowerCase().includes(searchValue));

  tbody.innerHTML = '';

  let totalBids = 0;
  let totalValue = 0;

  filteredLots.forEach((lot, index) => {
    const highestBid = lot.bids.length ? Math.max(...lot.bids.map(b => b.amount)) : lot.price;
    const remainingMs = lot.endTime ? lot.endTime - Date.now() : null;

    totalBids += lot.bids.length;
    totalValue += highestBid;

    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${index + 1}</td>
      <td>${lot.title}</td>
      <td>${lot.category}</td>
      <td>${
        currentUser?.role === 'admin'
          ? (lot.size || '-')
          : `<input type="text" placeholder="–í–∞—à –æ–±—ä—ë–º" id="userSize${lot.id}" style="width: 90px;" />`
      }</td>
      <td>${lot.price} —Å–æ–º</td>
      <td>${highestBid} —Å–æ–º</td>
      <td id="status${lot.id}">${lot.status}</td>
      <td>${lot.status === 'active' && remainingMs > 0 ? `<span id="timer${lot.id}">${formatTime(remainingMs)}</span>` : '‚Äî'}</td>
      <td>
        ${lot.status === 'active' && remainingMs > 0 ? `<input type="number" id="bidAmount${lot.id}" min="${highestBid + 1}" placeholder="–°—Ç–∞–≤–∫–∞" style="width: 80px;" />` : ''}
      </td>
      <td>
        ${lot.status === 'active' && remainingMs > 0 ? `<button onclick="placeBid(${lot.id})">–°—Ç–∞–≤–∫–∞</button>` : ''}
      </td>
    `;
    tbody.appendChild(tr);

    if (lot.bids.length > 0) {
      const bidHistoryRow = document.createElement('tr');
      bidHistoryRow.innerHTML = `
        <td colspan="10" style="text-align: left; background: #f9f9f9;">
          <b>üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫:</b><br/>
          ${lot.bids.map(b => {
            const date = new Date(b.time).toLocaleString();
            return `üë§ <b>${b.user}</b>: üí∞ ${b.amount} —Å–æ–º ${b.userSize ? `üì¶ <i>${b.userSize}</i>` : ''} üïí ${date}`;
          }).reverse().join('<br/>')}
        </td>
      `;
      tbody.appendChild(bidHistoryRow);
    }
  });

  document.getElementById('lotsTable').classList.remove('hidden');
  const stats = `üë• –õ–æ—Ç–æ–≤: ${filteredLots.length} | üí∞ –°—Ç–∞–≤–æ–∫: ${totalBids} | üìà –í—Å–µ–≥–æ: ${totalValue} —Å–æ–º`;
  document.getElementById('statsPanel').textContent = stats;
}
function renderWinners() {
  if (!currentUser || currentUser.role !== "admin") return;

  const winnersPanel = document.getElementById("winnersPanel");
  winnersPanel.innerHTML = "<h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</h3>";

  if (!winners || winners.length === 0) {
    winnersPanel.innerHTML += "<p>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.</p>";
    return;
  }

  const table = document.createElement("table");
  table.classList.add("winners-table");

  table.innerHTML = `
    <thead>
      <tr>
        <th>‚Ññ</th>
        <th>–õ–æ—Ç</th>
        <th>–°—Ç–∞–≤–∫–∞</th>
        <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
        <th>–û–±—ä—ë–º</th>
      </tr>
    </thead>
    <tbody>
      ${winners.map((w, i) => `
        <tr>
          <td>${i + 1}</td>
          <td>${w.title}</td>
          <td>${w.bid}</td>
          <td>${w.user}</td>
          <td>${w.volume}</td>
        </tr>
      `).join("")}
    </tbody>
  `;

  winnersPanel.appendChild(table);
}




  // ‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  function updateTimers() {
  const now = Date.now();
  lots.forEach(lot => {
    if (lot.status === 'active' && lot.endTime) {
      const remaining = lot.endTime - now;
      const timerEl = document.getElementById(`timer${lot.id}`);
      const statusEl = document.getElementById(`status${lot.id}`);

      if (remaining > 0 && timerEl) {
        timerEl.textContent = formatTime(remaining);
      } else if (remaining <= 0) {
        lot.status = 'sold'; // –ó–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç
        if (statusEl) statusEl.textContent = 'sold';
        if (timerEl) timerEl.textContent = '‚Äî';
        renderLots(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
      }
      if (remaining <= 0 && lot.status === 'active') {
        lot.status = 'sold';
        if (lot.currentBidder) {
          winners.push({
            lotId: lot.id,
            title: lot.title,
            winner: lot.currentBidder,
            bid: lot.currentPrice
          });
          localStorage.setItem('winners', JSON.stringify(winners));
        }
      
        const winner = lot.bids.length ? lot.bids[lot.bids.length - 1] : null;
        if (winner) {
          winners.push({ lotTitle: lot.title, user: winner.user, amount: winner.amount });
        }
      }
      
    }
  });
}
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–æ—Ä–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
document.getElementById('addUserForm').addEventListener('submit', function (e) {
  e.preventDefault();
  const username = document.getElementById('newUsername').value.trim();
  const password = document.getElementById('newPassword').value.trim();
  const role = document.getElementById('newUserRole').value;

  if (!username || !password) {
    alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å');
    return;
  }

  if (users.find(u => u.username === username)) {
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return;
  }

  users.push({ username, password, role });
  localStorage.setItem('users', JSON.stringify(users));
  alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" –¥–æ–±–∞–≤–ª–µ–Ω`);
  this.reset();
});

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
function renderWinners() {
  const panel = document.getElementById('winnersPanel');
  if (!currentUser || currentUser.role !== 'admin') {
    if(panel) panel.classList.add('hidden');
    return;
  }

  let winners = JSON.parse(localStorage.getItem('winners') || '[]');
  if (winners.length === 0) {
    panel.innerHTML = '<p>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</p>';
    panel.classList.remove('hidden');
    return;
  }

  let html = '<h3>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤</h3>';
  html += '<table border="1" style="width:100%; border-collapse: collapse;"><tr><th>–õ–æ—Ç</th><th>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å</th><th>–°—Ç–∞–≤–∫–∞</th></tr>';
  winners.forEach(w => {
    html += `<tr><td>${w.title}</td><td>${w.winner}</td><td>${w.bid}</td></tr>`;
  });
  html += '</table>';
  panel.innerHTML = html;
  panel.classList.remove('hidden');
}

// –í updateTimers() –∏–ª–∏ –≥–¥–µ —É —Ç–µ–±—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–æ—Ç–æ–≤ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function updateTimers() {
  const now = Date.now();
  lots.forEach(lot => {
    if (lot.status === 'active' && lot.endTime) {
      const remaining = lot.endTime - now;
      const timerEl = document.getElementById(`timer${lot.id}`);
      const statusEl = document.getElementById(`status${lot.id}`);

      if (remaining > 0 && timerEl) {
        timerEl.textContent = formatTime(remaining);
        if (remaining <= 0 && lot.status !== 'sold') {
          lot.status = 'sold';
          const td = document.getElementById(`timer-${lot.id}`);
          if (td) td.textContent = "–ó–∞–≤–µ—Ä—à—ë–Ω";
        
          if (lot.bids && lot.bids.length > 0) {
            const lastBid = lot.bids[lot.bids.length - 1];
            let winners = JSON.parse(localStorage.getItem('winners') || '[]');
        
            winners.push({
              title: lot.title,
              winner: lastBid.user,
              bid: lastBid.amount
            });
        
            localStorage.setItem('winners', JSON.stringify(winners));
            renderWinners();
          }
        }
        
      } else if (remaining <= 0) {
        lot.status = 'sold'; // –ó–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç
        if (statusEl) statusEl.textContent = 'sold';
        if (timerEl) timerEl.textContent = '‚Äî';
        renderLots(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        let winners = JSON.parse(localStorage.getItem('winners') || '[]');
        if (lot.bids.length > 0) {
          const lastBid = lot.bids[lot.bids.length - 1];
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª—Å—è
          const alreadyExists = winners.some(w => w.title === lot.title && w.winner === lastBid.user);
          if (!alreadyExists) {
            winners.push({
              title: lot.title,
              winner: lastBid.user,
              bid: lastBid.amount
            });
            localStorage.setItem('winners', JSON.stringify(winners));
            renderWinners();
          }
        }
      }
    }
  });
}

// –í—ã–∑–æ–≤ renderWinners –ø–æ—Å–ª–µ renderLots, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–∞–Ω–µ–ª—å
function showMainPage() {
  document.getElementById('loginPage').classList.add('hidden');
  document.getElementById('mainPage').classList.remove('hidden');
  currentUserSpan.textContent = currentUser.username;

  if (currentUser.role === 'admin') {
    adminPanel.classList.remove('hidden');
  } else {
    adminPanel.classList.add('hidden');
  }

  renderLots();
  renderWinners();

  if (!window.timerStarted) {
    window.timerStarted = true;
    setInterval(updateTimers, 1000);
  }
}

setInterval(updateTimers, 1000);
function renderWinners() {
  const panel = document.getElementById('winnersPanel');
  if (!winners.length) {
    panel.innerHTML = '<p>–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏.</p>';
    return;
  }

  panel.innerHTML = '<h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</h3>' + winners.map(w => 
    `<p>–õ–æ—Ç <b>${w.lotTitle}</b> ‚Äî üë§ ${w.user}, üí∞ ${w.amount} —Å–æ–º</p>`
  ).join('');
}



function placeBid(lotId) {
  const input = document.getElementById(`bidAmount${lotId}`);
  const amount = parseFloat(input?.value);
  const lot = lots.find(l => l.id === lotId);
  if (!lot) return alert('–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

  const highestBid = lot.bids.length ? Math.max(...lot.bids.map(b => b.amount)) : lot.price;

  if (isNaN(amount) || amount <= highestBid) {
    return alert(`–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ ${highestBid}`);
  }

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—ë–º
  let userSize = '';
  const userSizeInput = document.getElementById(`userSize${lotId}`);

  if (currentUser.role !== 'admin') {
    if (!userSizeInput || !userSizeInput.value.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º –ø–µ—Ä–µ–¥ —Å—Ç–∞–≤–∫–æ–π');
      return;
    }
    userSize = userSizeInput.value.trim();
  } else {
    userSize = lot.size || '';
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
  lot.bids.push({ user: currentUser.username, amount, time: Date.now(), userSize });
  // üîÅ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ (–µ—Å–ª–∏ –º–µ–Ω—å—à–µ 2 –º–∏–Ω –¥–æ –∫–æ–Ω—Ü–∞)
  const now = Date.now();
  const remaining = lot.endTime - now;
  const EXTEND_THRESHOLD = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã
  const EXTEND_TIME = 2 * 60 * 1000; // –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ 2 –º–∏–Ω—É—Ç—ã

  if (remaining > 0 && remaining < EXTEND_THRESHOLD) {
    lot.endTime = now + EXTEND_TIME;
  }


  input.value = '';
  if (userSizeInput) userSizeInput.value = '';

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  sendTelegramMessage(
    `üí∏ <b>–°—Ç–∞–≤–∫–∞:</b> ${amount} —Å–æ–º\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${currentUser.username}` +
    (userSize ? `\n<b>–û–±—ä—ë–º:</b> ${userSize}` : '') +
    `\n<b>–õ–æ—Ç:</b> ${lot.title}`
  );

  renderLots();
  showToast(`–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} —Å–æ–º`);
}



function addLot(event) {
  event.preventDefault();

  const title = newLotTitle.value;
  const category = newLotCategory.value;
  const price = parseFloat(newLotPrice.value);
  const status = newLotStatus.value;
  const size = newLotSize.value.trim();
  const endTimeInput = document.getElementById('newLotEndTime').value;
  const endTime = status === 'active' ? new Date(endTimeInput).getTime() : null;

  lots.push({
    id: lots.length + 1,
    title,
    category,
    price,
    size,
    image: 'https://via.placeholder.com/100',
    status,
    bids: [],
    endTime
  });

  addLotForm.reset();
  renderLots();
}




  

window.onload = () => {
  const savedUser = localStorage.getItem('auctionUser');
  if (savedUser) {
    currentUser = JSON.parse(savedUser);
    showMainPage();
  }
};

// ===== JSON –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ó–∞–≥—Ä—É–∑–∫–∞ =====

function saveToLocalStorage() {
  localStorage.setItem('lots', JSON.stringify(lots));
  localStorage.setItem('users', JSON.stringify(users));
  const data = { users, lots };
  localStorage.setItem('auctionData', JSON.stringify(data));
  alert('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ LocalStorage');
}

function loadFromLocalStorage() {
  const data = JSON.parse(localStorage.getItem('auctionData'));
  if (data) {
    if (Array.isArray(data.users)) users.splice(0, users.length, ...data.users);
    if (Array.isArray(data.lots)) lots = data.lots;
    alert('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ LocalStorage');
    renderLots();
  } else {
    alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  }
}

function downloadJSON() {
  const data = { users, lots };
  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = 'auction-data.json';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

function uploadJSONFile(event) {
  const file = event.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function (e) {
    try {
      const data = JSON.parse(e.target.result);
      if (Array.isArray(data.users)) users.splice(0, users.length, ...data.users);
      if (Array.isArray(data.lots)) lots = data.lots;
      alert('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞!');
      renderLots();
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON');
    }
  };
  reader.readAsText(file);
}

function showToast(message) {
  const toast = document.createElement('div');
  toast.textContent = message;
  toast.style.position = 'fixed';
  toast.style.bottom = '20px';
  toast.style.left = '50%';
  toast.style.transform = 'translateX(-50%)';
  toast.style.background = '#28a745';
  toast.style.color = 'white';
  toast.style.padding = '10px 20px';
  toast.style.borderRadius = '6px';
  toast.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
  toast.style.zIndex = 9999;
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 2500);
}

function handleExcelUpload(event) {
  const file = event.target.files[0];
  if (!file) return;

  const reader = new FileReader();

  reader.onload = function(e) {
    const data = new Uint8Array(e.target.result);
    const workbook = XLSX.read(data, { type: 'array' });

    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const json = XLSX.utils.sheet_to_json(worksheet);

    // –û–∂–∏–¥–∞–µ–º –ø–æ–ª—è: title, category, price, size, endTime (–≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DDTHH:MM")
    json.forEach((row, index) => {
      if (row.title && row.category && row.price && row.size && row.endTime) {
        lots.push({
          id: lots.length + 1,
          title: row.title,
          category: row.category,
          price: parseFloat(row.price),
          size: row.size,
          image: 'https://via.placeholder.com/100',
          status: 'active',
          bids: [],
          endTime: new Date(row.endTime).getTime()
        });
      }
    });

    renderLots();
    alert('–õ–æ—Ç—ã –∏–∑ Excel –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
  };

  reader.readAsArrayBuffer(file);
}
// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ localStorage
winners = JSON.parse(localStorage.getItem('winners')) || [];

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –∞–¥–º–∏–Ω)
renderWinners();

function renderWinners() {
  if (!currentUser || currentUser.role !== 'admin') return;

  const winnersPanel = document.getElementById('winnersPanel');
  const winners = JSON.parse(localStorage.getItem('winners') || '[]');

  if (winners.length === 0) {
    winnersPanel.innerHTML = "<p>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏.</p>";
    return;
  }

  let html = "<h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3><table><tr><th>–õ–æ—Ç</th><th>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å</th><th>–°—Ç–∞–≤–∫–∞</th></tr>";
  for (let w of winners) {
    html += `<tr><td>${w.title}</td><td>${w.winner}</td><td>${w.bid}</td></tr>`;
  }
  html += "</table>";
  winnersPanel.innerHTML = html;
}
